// Breaking news
package breaking

import (
	"crypto/sha256"
	"fmt"
	"log"
	"time"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// A "Developing Story" that is being updated frequently
type DevelopingStory struct {
	gorm.Model
	Slug        string `gorm:"uniqueIndex"`
	Updates     []Update
	LastUpdated time.Time
}

// An update to a developing story
type Update struct {
	gorm.Model
	Headline          string
	Body              string
	BodyHash          string `gorm:"uniqueIndex"`
	Url               string
	DevelopingStoryID uint
}

var db *gorm.DB

func init() {
	var err error
	db, err = gorm.Open(sqlite.Open("updates.db"), &gorm.Config{})
	if err != nil {
		log.Panic("failed to connect database")
	}
	db.AutoMigrate(&DevelopingStory{})
	db.AutoMigrate(&Update{})

}

func CreateStory(slug string) (*DevelopingStory, error) {
	story := DevelopingStory{
		Slug:        slug,
		Updates:     make([]Update, 0, 10),
		LastUpdated: time.Time{},
	}
	result := db.Create(&story)
	if result.Error != nil {
		return nil, result.Error
	}
	return &story, nil
}

func StoryExists(slug string) (*DevelopingStory, error) {
	story := &DevelopingStory{}
	result := db.Where(&DevelopingStory{Slug: slug}).First(story)
	if result.RowsAffected < 1 || result.Error != nil {
		return nil, result.Error
	}
	return story, nil
}

func UpdateIsDuplicate(body string) bool {
	hasher := sha256.New()
	_, err := hasher.Write([]byte(body))
	if err != nil {
		log.Printf("UpdateIsDuplicate - error hashing 'body': %v", err)
		return false
	}
	bodyHash := fmt.Sprintf("%x", hasher.Sum(nil))

	var updates []Update
	result := db.Where(Update{BodyHash: bodyHash}).Find(&updates)
	return result.RowsAffected > 0
}

func (story *DevelopingStory) AddUpdate(headline string, body string, url string) error {
	// calculate hash of body to check for duplicates
	// we're using the body here since headline (in our case) is generated by GPT3.5 and not guaranteed to be the same
	hasher := sha256.New()
	_, err := hasher.Write([]byte(body))
	if err != nil {
		log.Printf("AddUpdate - error hashing update body: %v", err)
		return err
	}
	bodyHash := fmt.Sprintf("%x", hasher.Sum(nil))

	update := Update{
		Headline:          headline,
		Body:              body,
		BodyHash:          bodyHash,
		Url:               url,
		DevelopingStoryID: story.ID,
	}
	result := db.Create(&update)
	if result.Error != nil {
		log.Printf("Error creating update: %v", result.Error)
		return result.Error
	}
	story.Updates = append(story.Updates, update)
	story.LastUpdated = time.Now()
	result = db.Save(story)
	if result.Error != nil {
		log.Printf("Error updating story: %v", result.Error)
		return result.Error
	}
	return nil
}

func AllStories() ([]DevelopingStory, error) {
	var stories []DevelopingStory
	result := db.Preload("Updates").Find(&stories)
	if result.Error != nil {
		return nil, result.Error
	}
	return stories, nil
}

func StoriesSince(startTime time.Time) ([]DevelopingStory, error) {
	var stories []DevelopingStory
	result := db.Where("last_updated > ?", startTime).Preload("Updates", "created_at > ?", startTime).Find(&stories)
	if result.Error != nil {
		return nil, result.Error
	}
	return stories, nil
}
